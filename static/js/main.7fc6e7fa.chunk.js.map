{"version":3,"sources":["components/Grid/GridHelper.js","components/Grid/GridHooks.js","components/Grid/Bot.js","providers/GameProvider.js","components/EndGameModal/EndGameModal.js","components/Grid/Grid.js","components/Game/Game.js","components/Menu/Menu.js","App.js","index.js"],"names":["getWinner","grid","i","j","isFull","availableMoves","available","push","minimax","depth","isMaximizing","winner","scores","length","row","col","Math","max","min","randomChoice","arr","floor","random","randomMove","smartMove","bestScore","log","bestMove","gridCopy","score","useGrid","mode","useContext","ModeContext","useState","setGrid","currentTurn","setCurrentTurn","useTurn","changeTurn","fill","temp","useEffect","botMove","setTimeout","GameContext","createContext","GameProvider","children","Provider","value","useStyles","makeStyles","modal","display","alignItems","justifyContent","textAlign","paper","padding","EndModal","classes","setMode","handleClose","Modal","open","onClose","className","Paper","displayWinner","Button","color","variant","onClick","wrapper","flexDirection","height","Grid","disabledClass","Box","id","Game","buttonContainer","marginBottom","ModeButton","others","size","Menu","play","container","Card","CardHeader","title","Typography","align","Container","ButtonGroup","orientation","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAAaA,EAAY,SAACC,GAExB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,GACiB,KAAfD,EAAKC,GAAG,IACRD,EAAKC,GAAG,KAAOD,EAAKC,GAAG,IACvBD,EAAKC,GAAG,KAAOD,EAAKC,GAAG,GAEvB,OAAOD,EAAKC,GAAG,GAInB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,GACiB,KAAfF,EAAK,GAAGE,IACRF,EAAK,GAAGE,KAAOF,EAAK,GAAGE,IACvBF,EAAK,GAAGE,KAAOF,EAAK,GAAGE,GAEvB,OAAOF,EAAK,GAAGE,GAInB,MACiB,KAAfF,EAAK,GAAG,IACRA,EAAK,GAAG,KAAOA,EAAK,GAAG,IACvBA,EAAK,GAAG,KAAOA,EAAK,GAAG,GAEhBA,EAAK,GAAG,GAIA,KAAfA,EAAK,GAAG,IACRA,EAAK,GAAG,KAAOA,EAAK,GAAG,IACvBA,EAAK,GAAG,KAAOA,EAAK,GAAG,GAEhBA,EAAK,GAAG,GAEV,IAGIG,EAAS,SAACH,GACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAmB,KAAfF,EAAKC,GAAGC,GAAW,OAAO,EAGlC,OAAO,GAGIE,EAAiB,SAACJ,GAE7B,IADA,IAAIK,EAAY,GACPJ,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACF,KAAfF,EAAKC,GAAGC,IAAWG,EAAUC,KAAK,CAACL,EAAGC,IAG9C,OAAOG,GAGIE,EAAU,SAAVA,EAAWP,GAA2C,IAArCQ,EAAoC,uDAA5B,EAAGC,EAAyB,wDAC5DC,EAASX,EAAUC,GAEvB,GAAe,MAAXU,EAAgB,OAAO,IAC3B,GAAe,MAAXA,EAAgB,OAAQ,IAC5B,GAAIP,EAAOH,GAAO,OAAO,EAIzB,IAFA,IAAIW,EAAS,GACTN,EAAYD,EAAeJ,GACtBC,EAAI,EAAGA,EAAII,EAAUO,OAAQX,IAAK,CAAC,IAAD,cACxBI,EAAUJ,GADc,GACpCY,EADoC,KAC/BC,EAD+B,KAGvCd,EAAKa,GAAKC,GADRL,EACe,IAEA,IAGnBE,EAAOL,KAAKC,EAAQ,YAAIP,GAAOQ,EAAQ,GAAIC,IAE3CT,EAAKa,GAAKC,GAAO,GAGnB,OAAIL,EAAqBM,KAAKC,IAAL,MAAAD,KAAYJ,GACzBI,KAAKE,IAAL,MAAAF,KAAYJ,IAGbO,EAAe,SAACC,GAC3B,OAAOA,EAAIJ,KAAKK,MAAML,KAAKM,SAAWF,EAAIP,UAG/BU,EAAa,SAACtB,GACzB,IAAIK,EAAYD,EAAeJ,GAC/B,OAAOkB,EAAab,IAGTkB,EAAY,SAACvB,GAMxB,IALA,IAAIwB,EAAYT,KAAKU,IAAI,GACrBC,EAAW,CAAC,CAAC,EAAG,IAChBC,EAAQ,YAAO3B,GACfK,EAAYD,EAAeJ,GAEtBC,EAAI,EAAGA,EAAII,EAAUO,OAAQX,IAAK,CAAC,IAAD,cACxBI,EAAUJ,GADc,GACpCY,EADoC,KAC/BC,EAD+B,KAEzCa,EAASd,GAAKC,GAAO,IAErB,IAAIc,EAAQrB,EAAQoB,GAEpBA,EAASd,GAAKC,GAAO,GAEjBc,EAAQJ,IACVA,EAAYI,EACZF,EAAW,CAACb,EAAKC,IAIrB,OAAOY,GCpGIG,EAAU,WAAO,IACpBC,EAASC,qBAAWC,GAApBF,KADmB,EAEHG,mBAAS,CAC/B,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,MALgB,mBAEpBjC,EAFoB,KAEdkC,EAFc,OATN,WAAM,MAEWD,mBAASf,EAAa,CAAC,IAAK,OAFvC,mBAEpBiB,EAFoB,KAEPC,EAFO,KAM3B,MAAO,CAACD,EAFW,kBAAMC,EAA+B,MAAhBD,EAAsB,IAAM,OAalCE,GARP,mBAQpBF,EARoB,KAQPG,EARO,KAUrBC,EAAO,SAAC1B,EAAKC,GACjB,GAAuB,KAAnBd,EAAKa,GAAKC,GAAa,CACzB,IAAI0B,EAAI,YAAOxC,GACfwC,EAAK3B,GAAKC,GAAOqB,EACjBG,IACAJ,EAAQM,KAoBZ,OAhBAC,qBAAU,WACR,GACW,OAATX,IACC3B,EAAOH,IACY,KAApBD,EAAUC,IACM,MAAhBmC,EACA,CAAC,IAAD,ECrCiB,SAACnC,EAAM8B,GAC5B,OAAQA,GACN,IAAK,IACH,OAAOR,EAAWtB,GACpB,IAAK,IACH,OAAOe,KAAKM,SAAW,IAAOC,EAAWtB,GAAQuB,EAAUvB,GAC7D,IAAK,IACH,OAAOe,KAAKM,SAAW,IAAOC,EAAWtB,GAAQuB,EAAUvB,GAC7D,QACE,OAAOuB,EAAUvB,ID6BA0C,CAAQ,YAAI1C,GAAO8B,GADpC,mBACKjB,EADL,KACUC,EADV,KAEA6B,YAAW,WACTJ,EAAK1B,EAAKC,KACT,QAIJ,CAACd,IAEG,CAACA,EAAMuC,EAAMJ,I,OE9ChBS,EAAcC,0BAEdC,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACHlB,IADG,mBAC9B7B,EAD8B,KACxBuC,EADwB,KAClBJ,EADkB,KAGrC,OACE,cAACS,EAAYI,SAAb,CAAsBC,MAAO,CAAEjD,OAAMuC,OAAMJ,eAA3C,SACGY,K,wCCHDG,EAAYC,YAAW,CAC3BC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,UAAW,UAEbC,MAAO,CACLC,QAAS,UAkDEC,EA9CE,WACf,IAAMC,EAAUV,IADK,EAEKnB,qBAAWC,GAA7BF,EAFa,EAEbA,KAAM+B,EAFO,EAEPA,QACN7D,EAAS+B,qBAAWa,GAApB5C,KAqBF8D,EAAc,WAClBD,EAAQ,KAGV,OACE,cAACE,EAAA,EAAD,CAAOC,KAvBA7D,EAAOH,IAA6B,KAApBD,EAAUC,GAuBViE,QAASH,EAAaI,UAAWN,EAAQR,MAAhE,SACE,eAACe,EAAA,EAAD,CAAOD,UAAWN,EAAQH,MAA1B,UACE,6BAtBgB,WACpB,IAAI/C,EAASX,EAAUC,GAEvB,MAAe,KAAXU,EAAsB,OAER,OAAToB,EACW,MAAXpB,EAAiB,iBAAmB,iBAKzB,MAAXA,EAAiB,WAAa,YAW9B0D,KAGK,OAATtC,GAAqC,MAApB/B,EAAUC,IAC1B,4BAAI,2BAGN,cAACqE,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,QAASV,EAArD,0BCjDFZ,G,MAAYC,YAAW,CAC3BsB,QAAS,CACPpB,QAAS,OACTqB,cAAe,SACfnB,eAAgB,SAChBD,WAAY,SAEZqB,OAAQ,YAqFGC,EAjFF,WACX,IAAMhB,EAAUV,IADC,EAEmBnB,qBAAWa,GAAvC5C,EAFS,EAETA,KAAMuC,EAFG,EAEHA,KAAMJ,EAFH,EAEGA,YACZL,EAASC,qBAAWC,GAApBF,KAGF+C,EAAgB,SAAChE,EAAKC,GAC1B,MAAqB,MAAhBqB,GAAgC,OAATL,GAAqC,KAAnB9B,EAAKa,GAAKC,GAC/C,WACG,IAQd,OACE,eAACgE,EAAA,EAAD,CAAKZ,UAAWN,EAAQa,QAAxB,UACE,cAAC,EAAD,IACA,qBAAIM,GAAG,eAAP,UAPW,OAATjD,EAAsC,MAAhBK,EAAsB,aAAe,aACxC,MAAhBA,EAAsB,OAAS,QAMpC,WACA,sBAAK+B,UAAU,iBAAf,UACE,wBACEA,UAAS,0BAAqBW,EAAc,EAAG,IAC/CL,QAAS,kBAAMjC,EAAK,EAAG,IAFzB,SAIGvC,EAAK,GAAG,KAEX,wBACEkE,UAAS,4BAAuBW,EAAc,EAAG,IACjDL,QAAS,kBAAMjC,EAAK,EAAG,IAFzB,SAIGvC,EAAK,GAAG,KAEX,wBACEkE,UAAS,2BAAsBW,EAAc,EAAG,IAChDL,QAAS,kBAAMjC,EAAK,EAAG,IAFzB,SAIGvC,EAAK,GAAG,KAEX,wBACEkE,UAAS,2BAAsBW,EAAc,EAAG,IAChDL,QAAS,kBAAMjC,EAAK,EAAG,IAFzB,SAIGvC,EAAK,GAAG,KAEX,wBACEkE,UAAS,6BAAwBW,EAAc,EAAG,IAClDL,QAAS,kBAAMjC,EAAK,EAAG,IAFzB,SAIGvC,EAAK,GAAG,KAEX,wBACEkE,UAAS,4BAAuBW,EAAc,EAAG,IACjDL,QAAS,kBAAMjC,EAAK,EAAG,IAFzB,SAIGvC,EAAK,GAAG,KAEX,wBACEkE,UAAS,2BAAsBW,EAAc,EAAG,IAChDL,QAAS,kBAAMjC,EAAK,EAAG,IAFzB,SAIGvC,EAAK,GAAG,KAEX,wBACEkE,UAAS,6BAAwBW,EAAc,EAAG,IAClDL,QAAS,kBAAMjC,EAAK,EAAG,IAFzB,SAIGvC,EAAK,GAAG,KAEX,wBACEkE,UAAS,4BAAuBW,EAAc,EAAG,IACjDL,QAAS,kBAAMjC,EAAK,EAAG,IAFzB,SAIGvC,EAAK,GAAG,YChFJgF,EATF,WACX,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,Q,+DCKA9B,EAAYC,YAAW,CAC3B8B,gBAAiB,CACf5B,QAAS,OACTE,eAAgB,SAChB2B,aAAc,QAEhBlF,KAAM,CACJsD,WAAY,SACZC,eAAgB,SAChBoB,OAAQ,WAINQ,EAAa,SAAC,GAAsC,IAApCX,EAAmC,EAAnCA,QAASzB,EAA0B,EAA1BA,SAAaqC,EAAa,sCACvD,OACE,cAACf,EAAA,EAAD,yBACEgB,KAAK,QAELb,QAASA,GACLY,GAJN,aAMGrC,MA0CQuC,EArCF,WACX,IAAM1B,EAAUV,IACRW,EAAY9B,qBAAWC,GAAvB6B,QAGF0B,EAAO,SAACzD,GACZ,OAAO,kBAAM+B,EAAQ/B,KAGvB,OACE,cAAC,IAAD,CAAMoC,UAAWN,EAAQ5D,KAAMwF,WAAS,EAAxC,SACE,eAACC,EAAA,EAAD,CAAMlB,QAAQ,WAAd,UACE,cAACmB,EAAA,EAAD,CACEC,MACE,cAACC,EAAA,EAAD,CAAYC,MAAM,SAAStB,QAAQ,KAAnC,uCAKJ,cAACuB,EAAA,EAAD,CAAW5B,UAAWN,EAAQqB,gBAA9B,SACE,eAACc,EAAA,EAAD,CACEC,YAAY,WACZ1B,MAAM,UACNC,QAAQ,YAHV,UAKE,cAAC,EAAD,CAAYC,QAASe,EAAK,MAA1B,4BACA,cAAC,EAAD,CAAYf,QAASe,EAAK,KAA1B,kBACA,cAAC,EAAD,CAAYf,QAASe,EAAK,KAA1B,oBACA,cAAC,EAAD,CAAYf,QAASe,EAAK,KAA1B,kBACA,cAAC,EAAD,CAAYf,QAASe,EAAK,KAA1B,mCChENvD,EAAca,0BAwBLoD,MAtBf,WAAe,MAWWhE,mBAAS,IAXpB,mBAWNH,EAXM,KAWA+B,EAXA,KAab,OACE,8BACE,cAAC7B,EAAYgB,SAAb,CAAsBC,MAAO,CAAEnB,OAAM+B,WAArC,SACY,KAAT/B,EAAc,cAAC,EAAD,IAAW,cAAC,EAAD,S,MCjBlCoE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7fc6e7fa.chunk.js","sourcesContent":["export const getWinner = (grid) => {\n  // Check horizontal\n  for (let i = 0; i < 3; i++) {\n    if (\n      grid[i][0] !== \"\" &&\n      grid[i][0] === grid[i][1] &&\n      grid[i][1] === grid[i][2]\n    )\n      return grid[i][0]\n  }\n\n  // Check vertical\n  for (let j = 0; j < 3; j++) {\n    if (\n      grid[0][j] !== \"\" &&\n      grid[0][j] === grid[1][j] &&\n      grid[1][j] === grid[2][j]\n    )\n      return grid[0][j]\n  }\n\n  // Main Diagonal\n  if (\n    grid[0][0] !== \"\" &&\n    grid[0][0] === grid[1][1] &&\n    grid[1][1] === grid[2][2]\n  )\n    return grid[0][0]\n\n  // Second Diagonal\n  if (\n    grid[0][2] !== \"\" &&\n    grid[0][2] === grid[1][1] &&\n    grid[1][1] === grid[2][0]\n  )\n    return grid[0][2]\n\n  return \"\"\n}\n\nexport const isFull = (grid) => {\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (grid[i][j] === \"\") return false\n    }\n  }\n  return true\n}\n\nexport const availableMoves = (grid) => {\n  let available = []\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (grid[i][j] === \"\") available.push([i, j])\n    }\n  }\n  return available\n}\n\nexport const minimax = (grid, depth = 1, isMaximizing = false) => {\n  let winner = getWinner(grid)\n\n  if (winner === \"O\") return 100\n  if (winner === \"X\") return -100\n  if (isFull(grid)) return 0\n\n  let scores = []\n  let available = availableMoves(grid)\n  for (let i = 0; i < available.length; i++) {\n    let [row, col] = available[i]\n    if (isMaximizing) {\n      grid[row][col] = \"O\"\n    } else {\n      grid[row][col] = \"X\"\n    }\n\n    scores.push(minimax([...grid], depth + 1, !isMaximizing))\n\n    grid[row][col] = \"\"\n  }\n\n  if (isMaximizing) return Math.max(...scores)\n  else return Math.min(...scores)\n}\n\nexport const randomChoice = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport const randomMove = (grid) => {\n  let available = availableMoves(grid)\n  return randomChoice(available)\n}\n\nexport const smartMove = (grid) => {\n  let bestScore = Math.log(0) // INF\n  let bestMove = [[0, 0]]\n  let gridCopy = [...grid]\n  let available = availableMoves(grid)\n\n  for (let i = 0; i < available.length; i++) {\n    let [row, col] = available[i]\n    gridCopy[row][col] = \"O\"\n\n    let score = minimax(gridCopy)\n\n    gridCopy[row][col] = \"\"\n\n    if (score > bestScore) {\n      bestScore = score\n      bestMove = [row, col]\n    }\n  }\n\n  return bestMove\n}\n","import { useState, useEffect, useContext } from \"react\"\nimport { randomChoice, getWinner, isFull } from \"./GridHelper\"\nimport { botMove } from \"./Bot\"\nimport { ModeContext } from \"../../App\"\n\nexport const useTurn = () => {\n  // X is for Human, O is for Human or Bot\n  const [currentTurn, setCurrentTurn] = useState(randomChoice([\"X\", \"O\"]))\n\n  const changeTurn = () => setCurrentTurn(currentTurn === \"X\" ? \"O\" : \"X\")\n\n  return [currentTurn, changeTurn]\n}\n\nexport const useGrid = () => {\n  const { mode } = useContext(ModeContext)\n  const [grid, setGrid] = useState([\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n  ])\n\n  const [currentTurn, changeTurn] = useTurn()\n\n  const fill = (row, col) => {\n    if (grid[row][col] === \"\") {\n      let temp = [...grid]\n      temp[row][col] = currentTurn\n      changeTurn()\n      setGrid(temp)\n    }\n  }\n\n  useEffect(() => {\n    if (\n      mode !== \"HH\" &&\n      !isFull(grid) &&\n      getWinner(grid) === \"\" &&\n      currentTurn === \"O\"\n    ) {\n      let [row, col] = botMove([...grid], mode)\n      setTimeout(() => {\n        fill(row, col)\n      }, 1000)\n    }\n\n    // eslint-disable-next-line\n  }, [grid])\n\n  return [grid, fill, currentTurn]\n}\n","import { randomMove, smartMove } from \"./GridHelper\"\n\nexport const botMove = (grid, mode) => {\n  switch (mode) {\n    case \"E\":\n      return randomMove(grid)\n    case \"M\":\n      return Math.random() < 0.15 ? randomMove(grid) : smartMove(grid)\n    case \"H\":\n      return Math.random() < 0.35 ? randomMove(grid) : smartMove(grid)\n    default:\n      return smartMove(grid)\n  }\n}\n","import { createContext } from \"react\"\nimport { useGrid } from \"../components/Grid/GridHooks\"\n\nconst GameContext = createContext()\n\nconst GameProvider = ({ children }) => {\n  const [grid, fill, currentTurn] = useGrid()\n\n  return (\n    <GameContext.Provider value={{ grid, fill, currentTurn }}>\n      {children}\n    </GameContext.Provider>\n  )\n}\n\nexport { GameContext, GameProvider }\n","import { useContext } from \"react\"\nimport { Modal, Paper, Button } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { GameContext } from \"../../providers/GameProvider\"\nimport { ModeContext } from \"../../App\"\nimport { isFull, getWinner } from \"../Grid/GridHelper\"\n\nconst useStyles = makeStyles({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n  },\n  paper: {\n    padding: \"15px\",\n  },\n})\n\nconst EndModal = () => {\n  const classes = useStyles()\n  const { mode, setMode } = useContext(ModeContext)\n  const { grid } = useContext(GameContext)\n\n  const isDone = () => {\n    return isFull(grid) || getWinner(grid) !== \"\"\n  }\n\n  const displayWinner = () => {\n    let winner = getWinner(grid)\n\n    if (winner === \"\") return \"Tied\"\n    // Human vs Human message\n    else if (mode === \"HH\") {\n      return winner === \"X\" ? \"Player 1 Wins!\" : \"Player 2 Wins!\"\n    }\n\n    // Human vs Bot message\n    else {\n      return winner === \"X\" ? \"You Win!\" : \"You Lose!\"\n    }\n  }\n\n  const handleClose = () => {\n    setMode(\"\")\n  }\n\n  return (\n    <Modal open={isDone()} onClose={handleClose} className={classes.modal}>\n      <Paper className={classes.paper}>\n        <h2>{displayWinner()}</h2>\n\n        {/* Only display when playing with bots */}\n        {mode !== \"HH\" && getWinner(grid) === \"O\" && (\n          <p>{\"Try again next time :)\"}</p>\n        )}\n\n        <Button color=\"primary\" variant=\"contained\" onClick={handleClose}>\n          Return\n        </Button>\n      </Paper>\n    </Modal>\n  )\n}\n\nexport default EndModal\n","import { useContext } from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { Box } from \"@material-ui/core\"\nimport { GameContext } from \"../../providers/GameProvider\"\nimport { ModeContext } from \"../../App\"\nimport EndModal from \"../EndGameModal/EndGameModal\"\nimport \"./Grid.scss\"\n\nconst useStyles = makeStyles({\n  wrapper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n\n    height: \"100vh\",\n  },\n})\n\nconst Grid = () => {\n  const classes = useStyles()\n  const { grid, fill, currentTurn } = useContext(GameContext)\n  const { mode } = useContext(ModeContext)\n\n  // To prevent making a move during Bot's turn or when a cell is already filled\n  const disabledClass = (row, col) => {\n    if ((currentTurn === \"O\" && mode !== \"HH\") || grid[row][col] !== \"\")\n      return \"disabled\"\n    else return \"\"\n  }\n\n  const displayTurn = () => {\n    if (mode === \"HH\") return currentTurn === \"X\" ? \"Player 1's\" : \"Player 2's\"\n    return currentTurn === \"X\" ? \"Your\" : \"Bot's\"\n  }\n\n  return (\n    <Box className={classes.wrapper}>\n      <EndModal></EndModal>\n      <h1 id=\"turn-display\">{displayTurn()} Turn</h1>\n      <div className=\"grid-container\">\n        <button\n          className={`upper-left cell ${disabledClass(0, 0)}`}\n          onClick={() => fill(0, 0)}\n        >\n          {grid[0][0]}\n        </button>\n        <button\n          className={`upper-center cell ${disabledClass(0, 1)}`}\n          onClick={() => fill(0, 1)}\n        >\n          {grid[0][1]}\n        </button>\n        <button\n          className={`upper-right cell ${disabledClass(0, 2)}`}\n          onClick={() => fill(0, 2)}\n        >\n          {grid[0][2]}\n        </button>\n        <button\n          className={`middle-left cell ${disabledClass(1, 0)}`}\n          onClick={() => fill(1, 0)}\n        >\n          {grid[1][0]}\n        </button>\n        <button\n          className={`middle-center cell ${disabledClass(1, 1)}`}\n          onClick={() => fill(1, 1)}\n        >\n          {grid[1][1]}\n        </button>\n        <button\n          className={`middle-right cell ${disabledClass(1, 2)}`}\n          onClick={() => fill(1, 2)}\n        >\n          {grid[1][2]}\n        </button>\n        <button\n          className={`bottom-left cell ${disabledClass(2, 0)}`}\n          onClick={() => fill(2, 0)}\n        >\n          {grid[2][0]}\n        </button>\n        <button\n          className={`bottom-center cell ${disabledClass(2, 1)}`}\n          onClick={() => fill(2, 1)}\n        >\n          {grid[2][1]}\n        </button>\n        <button\n          className={`bottom-right cell ${disabledClass(2, 2)}`}\n          onClick={() => fill(2, 2)}\n        >\n          {grid[2][2]}\n        </button>\n      </div>\n    </Box>\n  )\n}\n\nexport default Grid\n","import { GameProvider } from \"../../providers/GameProvider\"\nimport Grid from \"../Grid/Grid\"\nimport EndModal from \"../EndGameModal/EndGameModal\"\n\nconst Game = () => {\n  return (\n    <GameProvider>\n      <EndModal />\n      <Grid />\n    </GameProvider>\n  )\n}\n\nexport default Game\n","import { useContext } from \"react\"\nimport {\n  Button,\n  ButtonGroup,\n  Grid,\n  Card,\n  CardHeader,\n  Typography,\n  Container,\n} from \"@material-ui/core\"\nimport { ModeContext } from \"../../App\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nconst useStyles = makeStyles({\n  buttonContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginBottom: \"12px\",\n  },\n  grid: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100vh\",\n  },\n})\n\nconst ModeButton = ({ onClick, children, ...others }) => {\n  return (\n    <Button\n      size=\"small\"\n      // style={{ margin: \"5px\" }}\n      onClick={onClick}\n      {...others}\n    >\n      {children}\n    </Button>\n  )\n}\n\nconst Menu = () => {\n  const classes = useStyles()\n  const { setMode } = useContext(ModeContext)\n\n  // Returns function\n  const play = (mode) => {\n    return () => setMode(mode)\n  }\n\n  return (\n    <Grid className={classes.grid} container>\n      <Card variant=\"outlined\">\n        <CardHeader\n          title={\n            <Typography align=\"center\" variant=\"h4\">\n              Welcome to TicTacToe AI\n            </Typography>\n          }\n        ></CardHeader>\n        <Container className={classes.buttonContainer}>\n          <ButtonGroup\n            orientation=\"vertical\"\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            <ModeButton onClick={play(\"HH\")}>Human vs Human</ModeButton>\n            <ModeButton onClick={play(\"E\")}>Easy</ModeButton>\n            <ModeButton onClick={play(\"M\")}>Medium</ModeButton>\n            <ModeButton onClick={play(\"H\")}>Hard</ModeButton>\n            <ModeButton onClick={play(\"I\")}>Impossible</ModeButton>\n          </ButtonGroup>\n        </Container>\n      </Card>\n    </Grid>\n  )\n}\n\nexport default Menu\n","import Game from \"./components/Game/Game\"\nimport Menu from \"./components/Menu/Menu\"\nimport { createContext, useState } from \"react\"\n\nconst ModeContext = createContext()\n\nfunction App() {\n  /* \n  Mode types:\n  \"\" - Not Playing\n  \"HH\" - Human vs Human\n  \"E\" - Easy\n  \"M\" - Medium\n  \"H\" - Hard\n  \"I\" - Impossible\n  */\n\n  const [mode, setMode] = useState(\"\")\n\n  return (\n    <div>\n      <ModeContext.Provider value={{ mode, setMode }}>\n        {mode !== \"\" ? <Game /> : <Menu />}\n      </ModeContext.Provider>\n    </div>\n  )\n}\n\nexport default App\nexport { ModeContext }\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport \"./index.scss\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}