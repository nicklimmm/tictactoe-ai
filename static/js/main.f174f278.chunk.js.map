{"version":3,"sources":["components/Grid/GridHelper.js","components/Grid/GridHooks.js","components/Grid/Bot.js","components/Game/GameProvider.js","components/Cell/Cell.js","components/Grid/Grid.js","components/Button/Button.js","components/EndGameModal/EndGameModal.js","components/Game/Game.js","components/Menu/Menu.js","App.js","index.js"],"names":["getWinner","grid","i","j","isFull","availableMoves","available","push","minimax","depth","isMaximizing","winner","scores","length","row","col","Math","max","min","randomChoice","arr","floor","random","randomMove","smartMove","bestScore","log","bestMove","gridCopy","score","useGrid","mode","useContext","ModeContext","useState","setGrid","currentTurn","setCurrentTurn","useTurn","changeTurn","fill","temp","useEffect","botMove","setTimeout","GameContext","createContext","GameProvider","children","Provider","value","Cell","className","others","Grid","disabledClass","onClick","Button","EndModal","setMode","isDone","displayWinner","Game","ModeButton","Menu","play","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f174f278.chunk.js","sourcesContent":["export const getWinner = (grid) => {\n  // Check horizontal\n  for (let i = 0; i < 3; i++) {\n    if (\n      grid[i][0] !== \"\" &&\n      grid[i][0] === grid[i][1] &&\n      grid[i][1] === grid[i][2]\n    )\n      return grid[i][0]\n  }\n\n  // Check vertical\n  for (let j = 0; j < 3; j++) {\n    if (\n      grid[0][j] !== \"\" &&\n      grid[0][j] === grid[1][j] &&\n      grid[1][j] === grid[2][j]\n    )\n      return grid[0][j]\n  }\n\n  // Main Diagonal\n  if (\n    grid[0][0] !== \"\" &&\n    grid[0][0] === grid[1][1] &&\n    grid[1][1] === grid[2][2]\n  )\n    return grid[0][0]\n\n  // Second Diagonal\n  if (\n    grid[0][2] !== \"\" &&\n    grid[0][2] === grid[1][1] &&\n    grid[1][1] === grid[2][0]\n  )\n    return grid[0][2]\n\n  return \"\"\n}\n\nexport const isFull = (grid) => {\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (grid[i][j] === \"\") return false\n    }\n  }\n  return true\n}\n\nexport const availableMoves = (grid) => {\n  let available = []\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (grid[i][j] === \"\") available.push([i, j])\n    }\n  }\n  return available\n}\n\nexport const minimax = (grid, depth = 1, isMaximizing = false) => {\n  let winner = getWinner(grid)\n\n  if (winner === \"O\") return 100\n  if (winner === \"X\") return -100\n  if (isFull(grid)) return 0\n\n  let scores = []\n  let available = availableMoves(grid)\n  for (let i = 0; i < available.length; i++) {\n    let [row, col] = available[i]\n    if (isMaximizing) {\n      grid[row][col] = \"O\"\n    } else {\n      grid[row][col] = \"X\"\n    }\n\n    scores.push(minimax([...grid], depth + 1, !isMaximizing))\n\n    grid[row][col] = \"\"\n  }\n\n  if (isMaximizing) return Math.max(...scores)\n  else return Math.min(...scores)\n}\n\nexport const randomChoice = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nexport const randomMove = (grid) => {\n  let available = availableMoves(grid)\n  return randomChoice(available)\n}\n\nexport const smartMove = (grid) => {\n  let bestScore = Math.log(0) // INF\n  let bestMove = [[0, 0]]\n  let gridCopy = [...grid]\n  let available = availableMoves(grid)\n\n  for (let i = 0; i < available.length; i++) {\n    let [row, col] = available[i]\n    gridCopy[row][col] = \"O\"\n\n    let score = minimax(gridCopy)\n\n    gridCopy[row][col] = \"\"\n\n    if (score > bestScore) {\n      bestScore = score\n      bestMove = [row, col]\n    }\n  }\n\n  return bestMove\n}\n","import { useState, useEffect, useContext } from \"react\"\nimport { randomChoice, getWinner, isFull } from \"./GridHelper\"\nimport { botMove } from \"./Bot\"\nimport { ModeContext } from \"../../App\"\n\nexport const useTurn = () => {\n  // X is for Human, O is for Human or Bot\n  const [currentTurn, setCurrentTurn] = useState(randomChoice([\"X\", \"O\"]))\n\n  const changeTurn = () => setCurrentTurn(currentTurn === \"X\" ? \"O\" : \"X\")\n\n  return [currentTurn, changeTurn]\n}\n\nexport const useGrid = () => {\n  const { mode } = useContext(ModeContext)\n  const [grid, setGrid] = useState([\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n  ])\n\n  const [currentTurn, changeTurn] = useTurn()\n\n  const fill = (row, col) => {\n    if (grid[row][col] === \"\") {\n      let temp = [...grid]\n      temp[row][col] = currentTurn\n      changeTurn()\n      setGrid(temp)\n    }\n  }\n\n  useEffect(() => {\n    if (\n      mode !== \"HH\" &&\n      !isFull(grid) &&\n      getWinner(grid) === \"\" &&\n      currentTurn === \"O\"\n    ) {\n      let [row, col] = botMove([...grid], mode)\n      setTimeout(() => {\n        fill(row, col)\n      }, 1000)\n    }\n\n    // eslint-disable-next-line\n  }, [grid])\n\n  return [grid, fill, currentTurn]\n}\n","import { randomMove, smartMove } from \"./GridHelper\"\n\nexport const botMove = (grid, mode) => {\n  switch (mode) {\n    case \"E\":\n      return randomMove(grid)\n    case \"M\":\n      return Math.random() < 0.15 ? randomMove(grid) : smartMove(grid)\n    case \"H\":\n      return Math.random() < 0.35 ? randomMove(grid) : smartMove(grid)\n    default:\n      return smartMove(grid)\n  }\n}\n","import { createContext } from \"react\"\nimport { useGrid } from \"../Grid/GridHooks\"\n\nconst GameContext = createContext()\n\nconst GameProvider = ({ children }) => {\n  const [grid, fill, currentTurn] = useGrid()\n\n  return (\n    <GameContext.Provider value={{ grid, fill, currentTurn }}>\n      {children}\n    </GameContext.Provider>\n  )\n}\n\nexport { GameContext, GameProvider }\n","import \"./Cell.scss\"\n\nconst Cell = ({ children, className, ...others }) => {\n  return (\n    <button className={`cell ${className}`} {...others}>\n      {children}\n    </button>\n  )\n}\n\nexport default Cell\n","import { useContext } from \"react\"\nimport { GameContext } from \"../Game/GameProvider\"\nimport { ModeContext } from \"../../App\"\nimport Cell from \"../Cell/Cell\"\nimport \"./Grid.scss\"\n\nconst Grid = () => {\n  const { grid, fill, currentTurn } = useContext(GameContext)\n  const { mode } = useContext(ModeContext)\n\n  // To prevent making a move during Bot's turn or when a cell is already filled\n  const disabledClass = (row, col) => {\n    if ((currentTurn === \"O\" && mode !== \"HH\") || grid[row][col] !== \"\")\n      return \"disabled\"\n    else return \"\"\n  }\n\n  const displayTurn = () => {\n    if (mode === \"HH\") return currentTurn === \"X\" ? \"Player 1's\" : \"Player 2's\"\n    return currentTurn === \"X\" ? \"Your\" : \"Bot's\"\n  }\n\n  return (\n    <div className=\"grid\">\n      <h1 className=\"turn-display\">{displayTurn()} Turn</h1>\n      <div className=\"grid-container\">\n        <Cell\n          className={`upper-left ${disabledClass(0, 0)}`}\n          onClick={() => fill(0, 0)}\n        >\n          {grid[0][0]}\n        </Cell>\n        <Cell\n          className={`upper-center ${disabledClass(0, 1)}`}\n          onClick={() => fill(0, 1)}\n        >\n          {grid[0][1]}\n        </Cell>\n        <Cell\n          className={`upper-right ${disabledClass(0, 2)}`}\n          onClick={() => fill(0, 2)}\n        >\n          {grid[0][2]}\n        </Cell>\n        <Cell\n          className={`middle-left ${disabledClass(1, 0)}`}\n          onClick={() => fill(1, 0)}\n        >\n          {grid[1][0]}\n        </Cell>\n        <Cell\n          className={`middle-center ${disabledClass(1, 1)}`}\n          onClick={() => fill(1, 1)}\n        >\n          {grid[1][1]}\n        </Cell>\n        <Cell\n          className={`middle-right ${disabledClass(1, 2)}`}\n          onClick={() => fill(1, 2)}\n        >\n          {grid[1][2]}\n        </Cell>\n        <Cell\n          className={`bottom-left ${disabledClass(2, 0)}`}\n          onClick={() => fill(2, 0)}\n        >\n          {grid[2][0]}\n        </Cell>\n        <Cell\n          className={`bottom-center ${disabledClass(2, 1)}`}\n          onClick={() => fill(2, 1)}\n        >\n          {grid[2][1]}\n        </Cell>\n        <Cell\n          className={`bottom-right ${disabledClass(2, 2)}`}\n          onClick={() => fill(2, 2)}\n        >\n          {grid[2][2]}\n        </Cell>\n      </div>\n    </div>\n  )\n}\n\nexport default Grid\n","import \"./Button.scss\"\n\nconst Button = ({ children, className, ...others }) => {\n  return (\n    <button className={`button ${className}`} {...others}>\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n","import { useContext } from \"react\"\nimport { GameContext } from \"../Game/GameProvider\"\nimport { ModeContext } from \"../../App\"\nimport { isFull, getWinner } from \"../Grid/GridHelper\"\nimport Button from \"../Button/Button\"\n\nimport \"./EndGameModal.scss\"\n\nconst EndModal = () => {\n  const { mode, setMode } = useContext(ModeContext)\n  const { grid } = useContext(GameContext)\n\n  const isDone = (grid) => {\n    return isFull(grid) || getWinner(grid) !== \"\"\n  }\n\n  const displayWinner = (grid) => {\n    let winner = getWinner(grid)\n\n    if (winner === \"\") return \"Tied\"\n    // Human vs Human message\n    else if (mode === \"HH\") {\n      return winner === \"X\" ? \"Player 1 Wins!\" : \"Player 2 Wins!\"\n    }\n\n    // Human vs Bot message\n    else {\n      return winner === \"X\" ? \"You Win!\" : \"You Lose!\"\n    }\n  }\n\n  const handleClose = () => {\n    setMode(\"\")\n  }\n\n  return (\n    <>\n      {isDone(grid) && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h2 className=\"display-winner\">{displayWinner(grid)}</h2>\n\n            {/* Only display when playing with bots */}\n            {mode !== \"HH\" && getWinner(grid) === \"O\" && (\n              <p>{\"Try again next time :)\"}</p>\n            )}\n\n            <Button onClick={handleClose}>Return</Button>\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default EndModal\n","import { GameProvider } from \"./GameProvider\"\nimport Grid from \"../Grid/Grid\"\nimport EndModal from \"../EndGameModal/EndGameModal\"\n\nconst Game = () => {\n  return (\n    <GameProvider>\n      <EndModal></EndModal>\n      <Grid />\n    </GameProvider>\n  )\n}\n\nexport default Game\n","import { useContext } from \"react\"\nimport { ModeContext } from \"../../App\"\nimport Button from \"../Button/Button\"\nimport \"./Menu.scss\"\n\nconst ModeButton = ({ children, ...others }) => {\n  return <Button {...others}>{children}</Button>\n}\n\nconst Menu = () => {\n  const { setMode } = useContext(ModeContext)\n\n  // Returns function\n  const play = (mode) => {\n    return () => setMode(mode)\n  }\n\n  return (\n    <div className=\"menu\">\n      <h1 className=\"title\">Welcome to TicTacToe AI</h1>\n      <div className=\"button-group\">\n        <ModeButton onClick={play(\"HH\")}>Human vs Human</ModeButton>\n        <ModeButton onClick={play(\"E\")}>Easy</ModeButton>\n        <ModeButton onClick={play(\"M\")}>Medium</ModeButton>\n        <ModeButton onClick={play(\"H\")}>Hard</ModeButton>\n        <ModeButton onClick={play(\"I\")}>Impossible</ModeButton>\n      </div>\n    </div>\n  )\n}\n\nexport default Menu\n","import Game from \"./components/Game/Game\"\nimport Menu from \"./components/Menu/Menu\"\nimport { createContext, useState } from \"react\"\n\nconst ModeContext = createContext()\n\nfunction App() {\n  /* \n  Mode types:\n  \"\" - Not Playing\n  \"HH\" - Human vs Human\n  \"E\" - Easy\n  \"M\" - Medium\n  \"H\" - Hard\n  \"I\" - Impossible\n  */\n\n  const [mode, setMode] = useState(\"\")\n\n  return (\n    <div>\n      <ModeContext.Provider value={{ mode, setMode }}>\n        {mode !== \"\" ? <Game /> : <Menu />}\n      </ModeContext.Provider>\n    </div>\n  )\n}\n\nexport default App\nexport { ModeContext }\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.scss\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}